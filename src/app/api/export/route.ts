import { NextResponse } from "next/server";
import { jwtVerify } from "jose";
import { prisma } from "@/lib/prisma";
import { excelExportService } from "@/lib/excelExport";
import { aiSummarizationService } from "@/lib/aiSummarization";
import puppeteer from 'puppeteer';
import { format as dateFormat } from 'date-fns';
import { ReportsService } from "@/lib/reports";

// PDF Export Service
class PDFExportService {
  async generatePDFReport(data: any, reportType: string, userName: string, analyticsData?: any): Promise<Buffer> {
    const browser = await puppeteer.launch({
      headless: true,
      args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-web-security']
    });

    const page = await browser.newPage();

    // Generate AI-powered insights if analytics data is available
    let aiSummary = null;
    if (analyticsData && reportType === 'analytics') {
      aiSummary = aiSummarizationService.generateComprehensiveSummary(analyticsData);
    }

    // Determine if landscape orientation is needed based on content type
    const needsLandscape = this.shouldUseLandscape(data, reportType);
    
    // Generate HTML content for the PDF with AI insights
    const htmlContent = this.generateHTMLContent(data, reportType, userName, aiSummary);

    await page.setContent(htmlContent, {
      waitUntil: 'networkidle0',
      timeout: 30000
    });

    // Add Chart.js for beautiful charts
    await page.addScriptTag({ url: 'https://cdn.jsdelivr.net/npm/chart.js' });

    // Generate PDF with enhanced styling and dynamic orientation
    const pdfBuffer = await page.pdf({
      format: 'A4',
      landscape: needsLandscape,
      printBackground: true,
      margin: {
        top: needsLandscape ? '15mm' : '25mm',
        right: needsLandscape ? '15mm' : '20mm',
        bottom: needsLandscape ? '15mm' : '25mm',
        left: needsLandscape ? '15mm' : '20mm'
      },
      displayHeaderFooter: true,
      headerTemplate: this.generateHeaderTemplate(reportType, userName),
      footerTemplate: this.generateFooterTemplate(),
      preferCSSPageSize: true,
      scale: needsLandscape ? 0.8 : 1
    });

    await browser.close();
    return Buffer.from(pdfBuffer);
  }

  private shouldUseLandscape(data: any, reportType: string): boolean {
    // Use landscape for reports with wide tables or multiple columns
    const landscapeReports = ['opportunities', 'projects', 'immediate-sales', 'pending-quotations', 'pipeline', 'all'];
    
    if (landscapeReports.includes(reportType)) {
      return true;
    }
    
    // Check if data has large tables
    const hasLargeTables = 
      (data.opportunities && data.opportunities.length > 10) ||
      (data.projects && data.projects.length > 10) ||
      (data.immediateSales && data.immediateSales.length > 10) ||
      (data.pendingQuotations && data.pendingQuotations.length > 10);
    
    return hasLargeTables;
  }

  private generateHeaderTemplate(reportType: string, userName: string): string {
    return `
      <div style="
        font-size: 10px;
        text-align: center;
        width: 100%;
        padding: 10px 20px;
        background: linear-gradient(90deg, #1f2937 0%, #374151 100%);
        color: white;
        font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
        border-bottom: 2px solid #3b82f6;
      ">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <span style="font-weight: 600;">${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report</span>
          <span style="font-size: 9px; opacity: 0.8;">Generated by ${userName}</span>
          <span style="font-size: 9px; opacity: 0.8;">${dateFormat(new Date(), 'PPP')}</span>
        </div>
      </div>
    `;
  }

  private generateFooterTemplate(): string {
    return `
      <div style="
        font-size: 9px;
        text-align: center;
        width: 100%;
        padding: 8px;
        background: #f8fafc;
        border-top: 1px solid #e2e8f0;
        font-family: 'SF Pro Text', -apple-system, BlinkMacSystemFont, sans-serif;
        color: #64748b;
      ">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <span>Page <span class="pageNumber"></span> of <span class="totalPages"></span></span>
          <span style="font-size: 8px;">AI-Powered CRM Analytics • Confidential</span>
        </div>
      </div>
    `;
  }

  private generateHTMLContent(data: any, reportType: string, userName: string, aiSummary?: any): string {
    const reportTitle = `${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Report`;
    const generatedDate = dateFormat(new Date(), 'PPP p');

    return `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${reportTitle}</title>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <style>
          ${this.getEnhancedPDFStyles()}
        </style>
      </head>
      <body>
        <div class="header">
          <h1 class="report-title">${reportTitle}</h1>
          <div class="report-meta">
            <p><strong>Generated by:</strong> ${userName}</p>
            <p><strong>Generated on:</strong> ${generatedDate}</p>
            ${aiSummary ? '<p><strong>AI Analysis:</strong> Included</p>' : ''}
          </div>
        </div>

        <div class="content">
          ${aiSummary ? this.generateAISummarySection(aiSummary) : ''}
          ${aiSummary ? this.generateChartsSection(aiSummary.chartData) : ''}
          ${this.generateReportContent(data, reportType)}
          ${aiSummary ? this.generateRecommendationsSection(aiSummary.keyRecommendations) : ''}
        </div>

        <div class="footer">
          <p class="confidential">AI-Powered CRM Analytics - Confidential</p>
        </div>

        ${aiSummary ? this.generateChartScripts(aiSummary.chartData) : ''}
      </body>
      </html>
    `;
  }

  private generateAISummarySection(aiSummary: any): string {
    const nlpInsights = aiSummary.nlpInsights || {};

    return `
      <div class="ai-summary-section">
        <h2 class="section-title">🤖 Advanced NLP-Powered Executive Summary</h2>

        <div class="ai-insight-card">
          <div class="insight-header">
            <span class="insight-icon">📊</span>
            <h3>Executive Overview</h3>
          </div>
          <p class="insight-text">${aiSummary.executiveSummary}</p>
          ${nlpInsights.sentimentAnalysis ? `
            <div class="sentiment-badge" style="background: ${this.getSentimentColor(nlpInsights.sentimentAnalysis.overall)}">
              Sentiment: ${nlpInsights.sentimentAnalysis.overall.toUpperCase()}
              (${(nlpInsights.sentimentAnalysis.confidence * 100).toFixed(0)}% confidence)
            </div>
          ` : ''}
        </div>

        <div class="ai-insights-grid">
          <div class="ai-insight-card">
            <div class="insight-header">
              <span class="insight-icon">💰</span>
              <h3>Revenue Insights</h3>
            </div>
            <p class="insight-text">${aiSummary.revenueInsights}</p>
            ${nlpInsights.trendAnalysis ? `
              <div class="trend-indicator">
                Trend: ${nlpInsights.trendAnalysis.revenue.replace('_', ' ').toUpperCase()}
                (Confidence: ${(nlpInsights.trendAnalysis.confidence * 100).toFixed(0)}%)
              </div>
            ` : ''}
          </div>

          <div class="ai-insight-card">
            <div class="insight-header">
              <span class="insight-icon">👥</span>
              <h3>Customer Analysis</h3>
            </div>
            <p class="insight-text">${aiSummary.customerInsights}</p>
            ${nlpInsights.keyPhrases ? `
              <div class="key-phrases">
                <strong>Key Terms:</strong> ${nlpInsights.keyPhrases.slice(0, 3).join(', ')}
              </div>
            ` : ''}
          </div>

          <div class="ai-insight-card">
            <div class="insight-header">
              <span class="insight-icon">📈</span>
              <h3>Pipeline Analysis</h3>
            </div>
            <p class="insight-text">${aiSummary.pipelineAnalysis}</p>
            ${nlpInsights.anomalyDetection ? `
              <div class="anomaly-alert" style="color: ${nlpInsights.anomalyDetection.severity === 'high' ? '#DC2626' : '#F59E0B'}">
                Anomalies Detected: ${nlpInsights.anomalyDetection.count}
              </div>
            ` : ''}
          </div>

          <div class="ai-insight-card">
            <div class="insight-header">
              <span class="insight-icon">⚡</span>
              <h3>Performance Metrics</h3>
            </div>
            <p class="insight-text">${aiSummary.performanceMetrics}</p>
            ${nlpInsights.predictiveInsights ? `
              <div class="predictive-insights">
                ${nlpInsights.predictiveInsights.slice(0, 2).map((insight: string) => `<div>• ${insight}</div>`).join('')}
              </div>
            ` : ''}
          </div>
        </div>

        ${nlpInsights.keyPhrases ? `
          <div class="nlp-analysis-section">
            <h3>NLP Analysis Results</h3>
            <div class="nlp-grid">
              <div class="nlp-card">
                <h4>Top Keywords</h4>
                <div class="keyword-cloud">
                  ${nlpInsights.keyPhrases.slice(0, 8).map((phrase: string, index: number) =>
                    `<span class="keyword" style="font-size: ${Math.max(12, 16 - index * 1.5)}px">${phrase}</span>`
                  ).join(' ')}
                </div>
              </div>

              <div class="nlp-card">
                <h4>Trend Confidence</h4>
                <div class="confidence-meter">
                  <div class="confidence-bar" style="width: ${(nlpInsights.trendAnalysis?.confidence || 0) * 100}%"></div>
                  <span class="confidence-text">${((nlpInsights.trendAnalysis?.confidence || 0) * 100).toFixed(0)}%</span>
                </div>
              </div>
            </div>
          </div>
        ` : ''}
      </div>
    `;
  }

  private getSentimentColor(sentiment: string): string {
    switch (sentiment.toLowerCase()) {
      case 'positive': return 'linear-gradient(135deg, #10B981 0%, #059669 100%)';
      case 'negative': return 'linear-gradient(135deg, #EF4444 0%, #DC2626 100%)';
      default: return 'linear-gradient(135deg, #6B7280 0%, #4B5563 100%)';
    }
  }

  private generateChartsSection(chartData: any): string {
    return `
      <div class="charts-section">
        <h2 class="section-title">📊 Visual Analytics</h2>

        <div class="charts-grid">
          <div class="chart-container">
            <h3>Revenue Trend (Last 6 Months)</h3>
            <canvas id="revenueChart" width="400" height="200"></canvas>
          </div>

          <div class="chart-container">
            <h3>Sales Pipeline Distribution</h3>
            <canvas id="pipelineChart" width="400" height="200"></canvas>
          </div>
        </div>

        <div class="metrics-grid">
          ${chartData.performanceMetrics.map((metric: any) => `
            <div class="metric-card" style="border-left-color: ${metric.color}">
              <div class="metric-value" style="color: ${metric.color}">${metric.value}</div>
              <div class="metric-label">${metric.label}</div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  private generateRecommendationsSection(recommendations: string[]): string {
    return `
      <div class="recommendations-section">
        <h2 class="section-title">🎯 AI Recommendations</h2>

        <div class="recommendations-list">
          ${recommendations.map((rec, index) => `
            <div class="recommendation-item">
              <div class="recommendation-number">${index + 1}</div>
              <div class="recommendation-text">${rec}</div>
            </div>
          `).join('')}
        </div>
      </div>
    `;
  }

  private generateChartScripts(chartData: any): string {
    return `
      <script>
        document.addEventListener('DOMContentLoaded', function() {
          // Revenue Chart
          const revenueCtx = document.getElementById('revenueChart').getContext('2d');
          new Chart(revenueCtx, {
            type: 'line',
            data: ${JSON.stringify(chartData.revenueChart)},
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  display: true,
                  position: 'top'
                }
              },
              scales: {
                y: {
                  beginAtZero: true,
                  ticks: {
                    callback: function(value) {
                      return '$' + value.toLocaleString();
                    }
                  }
                }
              }
            }
          });

          // Pipeline Chart
          const pipelineCtx = document.getElementById('pipelineChart').getContext('2d');
          new Chart(pipelineCtx, {
            type: 'doughnut',
            data: ${JSON.stringify(chartData.pipelineChart)},
            options: {
              responsive: true,
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  display: true,
                  position: 'right'
                }
              }
            }
          });
        });
      </script>
    `;
  }

  private getEnhancedPDFStyles(): string {
    return `
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'SF Pro Text', sans-serif;
        line-height: 1.6;
        color: #1f2937;
        background: #ffffff;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }

      .header {
        background: linear-gradient(135deg, #1f2937 0%, #374151 100%);
        color: white;
        padding: 40px 30px;
        text-align: center;
        margin-bottom: 40px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.1);
      }

      .report-title {
        font-size: 36px;
        font-weight: 700;
        margin-bottom: 15px;
        letter-spacing: -0.5px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.2);
      }

      .report-meta {
        font-size: 14px;
        opacity: 0.9;
        display: flex;
        justify-content: center;
        gap: 30px;
        flex-wrap: wrap;
      }

      .report-meta p {
        margin: 0;
      }

      .content {
        padding: 0 30px;
        margin-bottom: 50px;
      }

      /* AI Summary Section */
      .ai-summary-section {
        margin-bottom: 40px;
        page-break-inside: avoid;
      }

      .ai-insight-card {
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        border: 1px solid #e2e8f0;
        border-radius: 16px;
        padding: 24px;
        margin-bottom: 20px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
      }

      .ai-insights-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
      }

      .insight-header {
        display: flex;
        align-items: center;
        gap: 12px;
        margin-bottom: 16px;
      }

      .insight-icon {
        font-size: 24px;
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        border-radius: 12px;
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      }

      .insight-header h3 {
        font-size: 18px;
        font-weight: 600;
        color: #1f2937;
        margin: 0;
      }

      .insight-text {
        font-size: 14px;
        line-height: 1.6;
        color: #475569;
        margin: 0;
      }

      /* Charts Section */
      .charts-section {
        margin-bottom: 40px;
        page-break-inside: avoid;
      }

      .charts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 30px;
        margin: 20px 0;
      }

      .chart-container {
        background: white;
        border: 1px solid #e2e8f0;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }

      .chart-container h3 {
        font-size: 16px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 16px;
        text-align: center;
      }

      .chart-container canvas {
        max-width: 100%;
        height: auto !important;
      }

      .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 16px;
        margin-top: 24px;
      }

      .metric-card {
        background: white;
        border: 2px solid #e2e8f0;
        border-left: 4px solid #3b82f6;
        border-radius: 12px;
        padding: 16px;
        text-align: center;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }

      .metric-value {
        font-size: 24px;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 4px;
      }

      .metric-label {
        font-size: 12px;
        color: #64748b;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 500;
      }

      /* Recommendations Section */
      .recommendations-section {
        margin-bottom: 40px;
        page-break-inside: avoid;
      }

      .recommendations-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      .recommendation-item {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        border: 1px solid #f59e0b;
        border-radius: 12px;
        padding: 16px;
        display: flex;
        align-items: flex-start;
        gap: 16px;
        box-shadow: 0 2px 8px rgba(245, 158, 11, 0.1);
      }

      .recommendation-number {
        background: #f59e0b;
        color: white;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: 600;
        flex-shrink: 0;
      }

      .recommendation-text {
        font-size: 14px;
        color: #92400e;
        line-height: 1.5;
        margin: 0;
      }

      /* Standard Sections */
      .section {
        margin-bottom: 30px;
        background: #f8fafc;
        border-radius: 12px;
        padding: 24px;
        border-left: 4px solid #3b82f6;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }

      .section-title {
        font-size: 24px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
      }

      .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        text-align: center;
        border: 1px solid #e2e8f0;
        transition: all 0.3s ease;
      }

      .stat-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.12);
      }

      .stat-value {
        font-size: 28px;
        font-weight: 700;
        color: #3b82f6;
        margin-bottom: 8px;
        font-variant-numeric: tabular-nums;
      }

      .stat-label {
        font-size: 14px;
        color: #64748b;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        font-weight: 500;
      }

      /* Data Tables */
      .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        border: 1px solid #e2e8f0;
      }

      .data-table th {
        background: linear-gradient(135deg, #1f2937 0%, #374151 100%);
        color: white;
        padding: 16px;
        text-align: left;
        font-weight: 600;
        font-size: 13px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-bottom: 2px solid #4b5563;
      }

      .data-table td {
        padding: 14px 16px;
        border-bottom: 1px solid #f1f5f9;
        font-size: 13px;
        color: #475569;
      }

      .data-table tr:nth-child(even) {
        background: #f8fafc;
      }

      .data-table tr:hover {
        background: #f1f5f9;
      }

      .data-table tr:last-child td {
        border-bottom: none;
      }

      /* Status Badges */
      .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: inline-block;
      }

      .status-pending {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        color: #92400e;
        border: 1px solid #f59e0b;
      }

      .status-approved {
        background: linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%);
        color: #065f46;
        border: 1px solid #10b981;
      }

      .status-rejected {
        background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
        color: #991b1b;
        border: 1px solid #ef4444;
      }

      .status-active {
        background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%);
        color: #1e40af;
        border: 1px solid #3b82f6;
      }

      .status-critical {
        background: linear-gradient(135deg, #fee2e2 0%, #fecaca 100%);
        color: #7f1d1d;
        border: 1px solid #dc2626;
        font-weight: 700;
      }

      /* Footer */
      .footer {
        background: linear-gradient(135deg, #1f2937 0%, #374151 100%);
        color: white;
        padding: 24px;
        text-align: center;
        margin-top: 50px;
        border-radius: 12px 12px 0 0;
      }

      .confidential {
        font-size: 12px;
        opacity: 0.8;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-weight: 500;
      }

      /* Page breaks */
      .ai-summary-section,
      .charts-section,
      .recommendations-section {
        page-break-inside: avoid;
      }

      .section {
        page-break-inside: avoid;
      }

      /* Print optimizations */
      @media print {
        .ai-insight-card,
        .chart-container,
        .stat-card {
          break-inside: avoid;
        }

        .charts-grid {
          grid-template-columns: 1fr;
          gap: 20px;
        }

        .ai-insights-grid {
          grid-template-columns: 1fr;
          gap: 16px;
        }
      }

      /* NLP Analysis Styles */
      .nlp-analysis-section {
        margin-top: 30px;
        padding: 20px;
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        border-radius: 12px;
        border: 1px solid #e2e8f0;
      }

      .nlp-analysis-section h3 {
        font-size: 20px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 20px;
        text-align: center;
      }

      .nlp-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
      }

      .nlp-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        border: 1px solid #e2e8f0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
      }

      .nlp-card h4 {
        font-size: 16px;
        font-weight: 600;
        color: #1f2937;
        margin-bottom: 12px;
        text-align: center;
      }

      .keyword-cloud {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        justify-content: center;
        align-items: center;
        min-height: 60px;
      }

      .keyword {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-weight: 500;
        display: inline-block;
      }

      .confidence-meter {
        position: relative;
        width: 100%;
        height: 24px;
        background: #e2e8f0;
        border-radius: 12px;
        overflow: hidden;
      }

      .confidence-bar {
        height: 100%;
        background: linear-gradient(135deg, #10B981 0%, #059669 100%);
        transition: width 0.3s ease;
      }

      .confidence-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-weight: 600;
        color: #1f2937;
        font-size: 12px;
      }

      /* Enhanced AI Insight Cards */
      .sentiment-badge {
        display: inline-block;
        padding: 6px 12px;
        border-radius: 20px;
        color: white;
        font-size: 11px;
        font-weight: 600;
        margin-top: 12px;
      }

      .trend-indicator {
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid #3b82f6;
        border-radius: 8px;
        padding: 8px 12px;
        margin-top: 12px;
        font-size: 12px;
        color: #1d4ed8;
        font-weight: 500;
      }

      .key-phrases {
        background: rgba(245, 158, 11, 0.1);
        border: 1px solid #f59e0b;
        border-radius: 8px;
        padding: 8px 12px;
        margin-top: 12px;
        font-size: 12px;
        color: #92400e;
      }

      .anomaly-alert {
        background: rgba(220, 38, 38, 0.1);
        border: 1px solid #dc2626;
        border-radius: 8px;
        padding: 8px 12px;
        margin-top: 12px;
        font-size: 12px;
        font-weight: 600;
      }

      .predictive-insights {
        margin-top: 12px;
        font-size: 12px;
        color: #475569;
        line-height: 1.4;
      }

      .predictive-insights div {
        margin-bottom: 4px;
      }

      /* Enhanced animations for PDF */
      .ai-insight-card {
        transition: all 0.3s ease;
      }

      .ai-insight-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.1);
      }

      /* Responsive adjustments */
      @media (max-width: 768px) {
        .charts-grid,
        .ai-insights-grid,
        .nlp-grid {
          grid-template-columns: 1fr;
        }

        .metrics-grid {
          grid-template-columns: repeat(2, 1fr);
        }

        .report-meta {
          flex-direction: column;
          gap: 8px;
        }

        .keyword-cloud {
          justify-content: flex-start;
        }

        .nlp-analysis-section {
          padding: 15px;
        }
      }
    `;
  }

  private generateReportContent(data: any, reportType: string): string {
    switch (reportType) {
      case 'leads':
        return this.generateLeadsContent(data.leads || []);
      case 'opportunities':
        return this.generateOpportunitiesContent(data.opportunities || []);
      case 'attendance':
        return this.generateAttendanceContent(data.attendance || []);
      case 'companies':
        return this.generateCompaniesContent(data.companies || []);
      case 'projects':
        return this.generateProjectsContent(data.projects || []);
      case 'immediate-sales':
        return this.generateImmediateSalesContent(data.immediateSales || []);
      case 'pending-quotations':
        return this.generatePendingQuotationsContent(data.pendingQuotations || []);
      case 'analytics':
        return this.generateAnalyticsContent(data);
      case 'forecast':
        return this.generateForecastContent(data);
      default:
        return this.generateAllContent(data);
    }
  }

  private generateLeadsContent(leads: any[]): string {
    const content = `
      <div class="section">
        <h2 class="section-title">📊 Leads Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${leads.length}</div>
            <div class="stat-label">Total Leads</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${leads.filter(l => l.status === 'new').length}</div>
            <div class="stat-label">New Leads</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${leads.filter(l => l.status === 'qualified').length}</div>
            <div class="stat-label">Qualified Leads</div>
          </div>
        </div>

        <table class="data-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Status</th>
              <th>Value</th>
              <th>Created Date</th>
            </tr>
          </thead>
          <tbody>
            ${leads.slice(0, 50).map(lead => `
              <tr>
                <td>${lead.name || ''}</td>
                <td>${lead.email || ''}</td>
                <td><span class="status-badge status-${lead.status || 'pending'}">${lead.status || 'pending'}</span></td>
                <td>$${(lead.value || 0).toLocaleString()}</td>
                <td>${lead.createdDate ? dateFormat(new Date(lead.createdDate), 'MMM dd, yyyy') : ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    return content;
  }

  private generateOpportunitiesContent(opportunities: any[]): string {
    const content = `
      <div class="section">
        <h2 class="section-title">🎯 Opportunities Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${opportunities.length}</div>
            <div class="stat-label">Total Opportunities</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${opportunities.filter(o => o.stage === 'CLOSED_WON').length}</div>
            <div class="stat-label">Won Deals</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">$${opportunities.reduce((sum, o) => sum + (o.dealSize || 0), 0).toLocaleString()}</div>
            <div class="stat-label">Total Value</div>
          </div>
        </div>

        <table class="data-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Stage</th>
              <th>Deal Size</th>
              <th>Probability</th>
              <th>Company</th>
              <th>Expected Close</th>
            </tr>
          </thead>
          <tbody>
            ${opportunities.slice(0, 50).map(opp => `
              <tr>
                <td>${opp.name || ''}</td>
                <td><span class="status-badge status-active">${opp.stage || ''}</span></td>
                <td>$${(opp.dealSize || 0).toLocaleString()}</td>
                <td>${opp.probability || 0}%</td>
                <td>${opp.companies?.name || ''}</td>
                <td>${opp.expectedCloseDate ? dateFormat(new Date(opp.expectedCloseDate), 'MMM dd, yyyy') : ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    return content;
  }

  private generateAttendanceContent(attendance: any[]): string {
    const content = `
      <div class="section">
        <h2 class="section-title">👥 Attendance Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${attendance.length}</div>
            <div class="stat-label">Total Records</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${attendance.filter(a => a.status === 'PRESENT').length}</div>
            <div class="stat-label">Present</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${attendance.filter(a => a.status === 'ABSENT').length}</div>
            <div class="stat-label">Absent</div>
          </div>
        </div>

        <table class="data-table">
          <thead>
            <tr>
              <th>User</th>
              <th>Date</th>
              <th>Status</th>
              <th>Visit Report</th>
            </tr>
          </thead>
          <tbody>
            ${attendance.slice(0, 50).map(record => `
              <tr>
                <td>${record.users_attendances_userIdTousers?.name || ''}</td>
                <td>${record.date ? dateFormat(new Date(record.date), 'MMM dd, yyyy') : ''}</td>
                <td><span class="status-badge status-${record.status?.toLowerCase() || 'pending'}">${record.status || ''}</span></td>
                <td>${record.visitReport ? record.visitReport.substring(0, 100) + '...' : ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    return content;
  }

  private generateCompaniesContent(companies: any[]): string {
    const content = `
      <div class="section">
        <h2 class="section-title">🏢 Companies Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${companies.length}</div>
            <div class="stat-label">Total Companies</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${companies.reduce((sum, c) => sum + (c.opportunities?.length || 0), 0)}</div>
            <div class="stat-label">Total Opportunities</div>
          </div>
        </div>

        <table class="data-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Region</th>
              <th>Type</th>
              <th>Total Opportunities</th>
              <th>Total Value</th>
            </tr>
          </thead>
          <tbody>
            ${companies.slice(0, 50).map(company => `
              <tr>
                <td>${company.name || ''}</td>
                <td>${company.region || ''}</td>
                <td>${company.type || ''}</td>
                <td>${company.opportunities?.length || 0}</td>
                <td>$${(company.opportunities?.reduce((sum: number, opp: any) => sum + (opp.dealSize || 0), 0) || 0).toLocaleString()}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    return content;
  }

  private generateProjectsContent(projects: any[]): string {
    const content = `
      <div class="section">
        <h2 class="section-title">📋 Projects Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${projects.length}</div>
            <div class="stat-label">Total Projects</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${projects.filter(p => p.status === 'COMPLETED').length}</div>
            <div class="stat-label">Completed</div>
          </div>
        </div>

        <table class="data-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Status</th>
              <th>Priority</th>
              <th>Owner</th>
              <th>Start Date</th>
              <th>End Date</th>
            </tr>
          </thead>
          <tbody>
            ${projects.slice(0, 50).map(project => `
              <tr>
                <td>${project.name || ''}</td>
                <td><span class="status-badge status-${project.status?.toLowerCase() || 'pending'}">${project.status || ''}</span></td>
                <td>${project.priority || ''}</td>
                <td>${project.users_projects_ownerIdTousers?.name || ''}</td>
                <td>${project.startDate ? dateFormat(new Date(project.startDate), 'MMM dd, yyyy') : ''}</td>
                <td>${project.endDate ? dateFormat(new Date(project.endDate), 'MMM dd, yyyy') : ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    return content;
  }

  private generateImmediateSalesContent(sales: any[]): string {
    const content = `
      <div class="section">
        <h2 class="section-title">💰 Immediate Sales Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${sales.length}</div>
            <div class="stat-label">Total Sales</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${sales.filter(s => s.status === 'AWARDED').length}</div>
            <div class="stat-label">Awarded</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">$${sales.reduce((sum, s) => sum + (s.valueOfOrder || 0), 0).toLocaleString()}</div>
            <div class="stat-label">Total Value</div>
          </div>
        </div>

        <table class="data-table">
          <thead>
            <tr>
              <th>Project</th>
              <th>Contractor</th>
              <th>Size Class</th>
              <th>Order Value</th>
              <th>Status</th>
              <th>Quotation Date</th>
            </tr>
          </thead>
          <tbody>
            ${sales.slice(0, 50).map(sale => `
              <tr>
                <td>${sale.projects?.name || ''}</td>
                <td>${sale.contractor || ''}</td>
                <td>${sale.sizeClass || ''}</td>
                <td>$${(sale.valueOfOrder || 0).toLocaleString()}</td>
                <td><span class="status-badge status-${sale.status?.toLowerCase() || 'pending'}">${sale.status || ''}</span></td>
                <td>${sale.quotationDate ? dateFormat(new Date(sale.quotationDate), 'MMM dd, yyyy') : ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    return content;
  }

  private generatePendingQuotationsContent(quotations: any[]): string {
    const content = `
      <div class="section">
        <h2 class="section-title">📄 Pending Quotations Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${quotations.length}</div>
            <div class="stat-label">Total Quotations</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${quotations.filter(q => q.status === 'OVERDUE').length}</div>
            <div class="stat-label">Overdue</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">$${quotations.reduce((sum, q) => sum + (q.orderValue || 0), 0).toLocaleString()}</div>
            <div class="stat-label">Total Value</div>
          </div>
        </div>

        <table class="data-table">
          <thead>
            <tr>
              <th>Project/Client</th>
              <th>Status</th>
              <th>Value</th>
              <th>Deadline</th>
              <th>Contact Person</th>
            </tr>
          </thead>
          <tbody>
            ${quotations.slice(0, 50).map(quotation => `
              <tr>
                <td>${quotation.projectOrClientName || ''}</td>
                <td><span class="status-badge status-${quotation.status?.toLowerCase() || 'pending'}">${quotation.status || ''}</span></td>
                <td>$${(quotation.orderValue || 0).toLocaleString()}</td>
                <td>${quotation.quotationDeadline ? dateFormat(new Date(quotation.quotationDeadline), 'MMM dd, yyyy') : ''}</td>
                <td>${quotation.contactPerson || ''}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </div>
    `;
    return content;
  }

  private generateAnalyticsContent(data: any): string {
    return `
      <div class="section">
        <h2 class="section-title">📈 Analytics Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${data.totalLeads || 0}</div>
            <div class="stat-label">Total Leads</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${data.totalOpportunities || 0}</div>
            <div class="stat-label">Total Opportunities</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">$${(data.totalRevenue || 0).toLocaleString()}</div>
            <div class="stat-label">Total Revenue</div>
          </div>
        </div>
        <p>Analytics data would be visualized here with charts and detailed breakdowns.</p>
      </div>
    `;
  }

  private generateForecastContent(data: any): string {
    return `
      <div class="section">
        <h2 class="section-title">🔮 Forecast Overview</h2>
        <div class="stats-grid">
          <div class="stat-card">
            <div class="stat-value">${data.predictedRevenue ? '$' + data.predictedRevenue.toLocaleString() : 'N/A'}</div>
            <div class="stat-label">Predicted Revenue</div>
          </div>
          <div class="stat-card">
            <div class="stat-value">${data.confidence || 0}%</div>
            <div class="stat-label">Confidence Level</div>
          </div>
        </div>
        <p>Forecast data includes revenue predictions and confidence intervals.</p>
      </div>
    `;
  }

  private generateAllContent(data: any): string {
    return `
      ${this.generateLeadsContent(data.leads || [])}
      ${this.generateOpportunitiesContent(data.opportunities || [])}
      ${this.generateAttendanceContent(data.attendance || [])}
      ${this.generateCompaniesContent(data.companies || [])}
      ${this.generateProjectsContent(data.projects || [])}
      ${this.generateImmediateSalesContent(data.immediateSales || [])}
      ${this.generatePendingQuotationsContent(data.pendingQuotations || [])}
    `;
  }
}

const pdfExportService = new PDFExportService();

// Helper function to get user from token
async function getUserFromToken(request: Request) {
  try {
    const token = request.headers.get("cookie")?.split("token=")[1]?.split(";")[0];
    if (!token) {
      return null;
    }

    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const { payload } = await jwtVerify(token, secret);

    if (payload.userId) {
      const user = await prisma.users.findUnique({
        where: { email: payload.userId as string },
      });
      return user;
    }
    return null;
  } catch (error) {
    console.error("Error verifying token:", error);
    return null;
  }
}

export async function GET(request: Request) {
  try {
    const user = await getUserFromToken(request);
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const requestUrl = new URL(request.url);
    const { searchParams } = requestUrl;
    const baseOrigin = requestUrl.origin;
    const type = searchParams.get('type') || 'all';
    const format = searchParams.get('format') || 'excel';
    const period = searchParams.get('period');
    const filterParam = searchParams.get('filter');
    const filtersParam = searchParams.get('filters');

    // Parse filters if provided
    let parsedFilters = null;
    if (filtersParam) {
      try {
        parsedFilters = JSON.parse(filtersParam);
      } catch (error) {
        console.warn('Failed to parse filters:', error);
      }
    }

    // Fetch data based on type and user role
    const isAdmin = user.role === 'admin' || user.role === 'SuperAdmin';
    const userId = user.id;

    const exportData: any = {};

    if (type === 'all' || type === 'leads') {
      let leadsWhere: any = isAdmin ? {} : { ownerId: userId };

      // Apply filters if provided
      if (parsedFilters && parsedFilters.leadSources?.length > 0) {
        leadsWhere.source = { in: parsedFilters.leadSources };
      }

      if (parsedFilters && parsedFilters.dateRange?.startDate) {
        leadsWhere.createdDate = {
          ...leadsWhere.createdDate,
          gte: new Date(parsedFilters.dateRange.startDate)
        };
      }

      if (parsedFilters && parsedFilters.dateRange?.endDate) {
        leadsWhere.createdDate = {
          ...leadsWhere.createdDate,
          lte: new Date(parsedFilters.dateRange.endDate)
        };
      }

      exportData.leads = await prisma.leads.findMany({
        where: leadsWhere,
        select: {
          id: true,
          name: true,
          source: true,
          status: true,
          email: true,
          phone: true,
          createdDate: true,
          updatedAt: true,
          users: { select: { name: true } },
          opportunities: {
            select: {
              id: true,
              name: true,
              stage: true,
              dealSize: true,
              probability: true
            }
          },
        },
        orderBy: { createdDate: 'desc' }
      });
    }

    if (type === 'all' || type === 'opportunities') {
      let opportunitiesWhere: any = isAdmin ? {} : { ownerId: userId };

      // Apply filters if provided
      if (parsedFilters && parsedFilters.statuses?.length > 0) {
        opportunitiesWhere.stage = { in: parsedFilters.statuses };
      }

      if (parsedFilters && parsedFilters.dealSizes?.min) {
        opportunitiesWhere.dealSize = {
          ...opportunitiesWhere.dealSize,
          gte: parseFloat(parsedFilters.dealSizes.min)
        };
      }

      if (parsedFilters && parsedFilters.dealSizes?.max) {
        opportunitiesWhere.dealSize = {
          ...opportunitiesWhere.dealSize,
          lte: parseFloat(parsedFilters.dealSizes.max)
        };
      }

      if (parsedFilters && parsedFilters.regions?.length > 0) {
        opportunitiesWhere.companies = {
          region: { in: parsedFilters.regions }
        };
      }

      if (parsedFilters && parsedFilters.showHighValueOnly) {
        opportunitiesWhere.dealSize = {
          ...opportunitiesWhere.dealSize,
          gte: 1000000 // High value threshold
        };
      }

      exportData.opportunities = await prisma.opportunities.findMany({
        where: opportunitiesWhere,
        include: {
          companies: { select: { name: true } },
          leads: { select: { name: true } },
          users: { select: { name: true } },
        },
        orderBy: { createdDate: 'desc' }
      });
    }

    if (type === 'all' || type === 'attendance') {
      exportData.attendance = await prisma.attendances.findMany({
        where: isAdmin ? {} : { userId: userId },
        include: {
          users_attendances_userIdTousers: { select: { name: true, employeeCode: true } },
        },
        orderBy: { date: 'desc' }
      });
    }

    if (type === 'all' || type === 'companies') {
      exportData.companies = await prisma.companies.findMany({
        where: isAdmin ? {} : { ownerId: userId },
        include: {
          opportunities: true,
        },
        orderBy: { createdDate: 'desc' }
      });
    }

    if (type === 'all' || type === 'projects') {
      exportData.projects = await prisma.projects.findMany({
        where: isAdmin ? {} : { ownerId: userId },
        include: {
          users_projects_ownerIdTousers: { select: { name: true } },
          users_projects_assignedAdminIdTousers: { select: { name: true } },
        },
        orderBy: { createdAt: 'desc' }
      });
    }

    if (type === 'all' || type === 'activities') {
      exportData.activities = await prisma.activities.findMany({
        where: isAdmin ? {} : { userId: userId },
        include: {
          users: { select: { name: true } },
          leads: { select: { name: true } },
        },
        orderBy: { occurredAt: 'desc' }
      });
    }

    if (type === 'all' || type === 'pending-quotations') {
      exportData.pendingQuotations = await prisma.pending_quotations.findMany({
        where: isAdmin ? {} : { createdById: userId },
        include: {
          users: { select: { name: true } },
          immediate_sales: true,
          projects: true,
          sales_deals: true,
        },
        orderBy: { createdAt: 'desc' }
      });
    }

    if (type === 'all' || type === 'immediate-sales') {
      exportData.immediateSales = await prisma.immediate_sales.findMany({
        where: isAdmin ? {} : { ownerId: userId },
        include: {
          users: { select: { name: true } },
          projects: { select: { name: true } },
        },
        orderBy: { createdAt: 'desc' }
      });
    }

    // Pipelines export with owner/user and company included
    if (type === 'all' || type === 'pipeline') {
      exportData.pipelines = await prisma.pipelines.findMany({
        where: isAdmin ? {} : { ownerId: userId },
        include: {
          users: { select: { name: true, email: true } },
          companies: { select: { name: true } },
        },
        orderBy: { orderDate: 'desc' }
      });
    }

    // Web Portal Sales export
    if (type === 'all' || type === 'web-portal-sales') {
      // Fetch data from the web-portal-sales API
      const webPortalSalesResponse = await fetch(`${baseOrigin}/api/web-portal-sales`);
      if (webPortalSalesResponse.ok) {
        const webPortalSalesData = await webPortalSalesResponse.json();
        exportData['web-portal-sales'] = webPortalSalesData.webPortalSales || [];
        // Also include analytics and insights
        if (webPortalSalesData.analytics) {
          (exportData as any)['web-portal-sales-analytics'] = webPortalSalesData.analytics;
        }
        if (webPortalSalesData.insights) {
          (exportData as any)['web-portal-sales-insights'] = webPortalSalesData.insights;
        }
      }
    }

    if (type === 'forecast') {
      // Get forecast data from the forecast API
      const forecastResponse = await fetch(`${baseOrigin}/api/forecast?period=${period || 'month'}&confidence=0.8`);
      if (forecastResponse.ok) {
        exportData.forecast = await forecastResponse.json();
      }
    }

    if (type === 'analytics') {
      // Get analytics data from the analytics API
      const analyticsResponse = await fetch(`${baseOrigin}/api/analytics`);
      if (analyticsResponse.ok) {
        exportData.analytics = await analyticsResponse.json();
      }
    }

    // Attach detailed report sections based on export type
    const reportsService = new ReportsService();
    if (type === 'opportunities' || type === 'all') {
      try {
        const salesReport = await reportsService.generateSalesReport((period || 'month') as any);
        (exportData as any).salesReport = salesReport;
      } catch {}
    }
    if (type === 'attendance' || type === 'all') {
      try {
        const attendanceReport = await reportsService.generateAttendanceReport((period || 'month') as any);
        (exportData as any).attendanceReport = attendanceReport;
      } catch {}
    }
    if (type === 'pending-quotations' || type === 'all') {
      try {
        const quotationReport = await reportsService.generateQuotationReport((period || 'month') as any);
        (exportData as any).quotationReport = quotationReport;
      } catch {}
    }
    if (type === 'web-portal-sales' || type === 'all') {
      try {
        const webPortalSalesReport = await reportsService.generateWebPortalSalesReport((period || 'month') as any);
        (exportData as any).webPortalSalesReport = webPortalSalesReport;
      } catch {}
    }

    // Get user name for reports
    const userRecord = await prisma.users.findUnique({
      where: { id: userId },
      select: { name: true }
    });

    const userName = userRecord?.name || 'Unknown User';

    // Get analytics data for AI-powered PDF reports
    let analyticsData = null;
    if (format === 'pdf' && (type === 'analytics' || type === 'all')) {
      try {
        const analyticsResponse = await fetch(`${baseOrigin}/api/analytics`);
        if (analyticsResponse.ok) {
          analyticsData = await analyticsResponse.json();
        }
      } catch (error) {
        console.warn('Failed to fetch analytics data for PDF:', error);
      }
    }

    let buffer: Buffer;
    let contentType: string;
    let fileName: string;

    if (format === 'pdf') {
      // Generate AI-powered PDF report
      buffer = await pdfExportService.generatePDFReport(exportData, type, userName, analyticsData);
      contentType = 'application/pdf';
      fileName = `crm-${type}-report-ai-${dateFormat(new Date(), 'yyyy-MM-dd-HH-mm-ss')}.pdf`;
    } else {
      // Generate enhanced Excel file (default)
      buffer = await excelExportService.exportAll(exportData);
      contentType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      fileName = excelExportService.generateFileName(`crm-${type}-export`);
    }

    // Return file
    return new NextResponse(new Uint8Array(buffer), {
      headers: {
        'Content-Type': contentType,
        'Content-Disposition': `attachment; filename="${fileName}"`,
      },
    });

  } catch (error: unknown) {
    console.error("Error exporting data:", error);
    const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
    return NextResponse.json(
      { error: "Failed to export data", details: errorMessage },
      { status: 500 }
    );
  }
}
